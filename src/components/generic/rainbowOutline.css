@property --glow-deg {
	syntax: "<angle>";
	inherits: true;
	initial-value: -90deg;
}

@keyframes glowRotate {
	100% {
		--glow-deg: 270deg;
	}
}

@keyframes rotate {
	100% {
		rotate: 360deg;
	}
}

.rainbowOutline {
	display: flex;
	align-items: center;

	position: relative;

	left: calc(-1 * var(--borderSize));
	width: calc(100% - var(--borderSize));

	color: #FFF;
	background: transparent;
	padding: var(--borderSize);



	> .rainbow {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;

		filter: blur(var(--blurSize));

		border-radius: inherit;

		> * {
			position: relative;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;

			background-color: transparent;


			border: 1px solid white;
			border-radius: inherit;
			overflow: hidden;

			&:before {
				content: "";
				position: absolute;
				top: 0;
				right: 0;
				bottom: 0;
				left: 0;
				background: conic-gradient(from var(--glow-deg),
						red,
						yellow,
						green,
						blue,
						purple,
						red);

				animation: glowRotate var(--animationTime) infinite linear;
				animation-play-state: var(--playState);
				scale: max(var(--aspectRatio), 1) max(calc(1 / var(--aspectRatio)), 1);
			}

			@media (pointer: coarse) {
				&::before {
					animation: rotate var(--animationTime) infinite linear;
					animation-play-state: var(--mobilePlayState);
				}

				&.mobileAnim::before {
					scale: calc(100 * var(--aspectRatio)) calc(100 * max(calc(1 / var(--aspectRatio)), 1));
				}
			}
		}
	}

	@media (pointer: fine) {
		&:hover > .rainbow > *::before {
			animation-play-state: var(--hoverPlayState);
		}
	}

	> .rainbow__content {
		position: relative;
		top: 0;
		left: 0;
		overflow: hidden;
		width: 100%;
		border-radius: inherit;
	}
}